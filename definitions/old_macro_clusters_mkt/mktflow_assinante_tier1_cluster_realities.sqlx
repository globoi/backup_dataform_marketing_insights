config {
  type: 'table',
  tags: ['macrocluster_old','schedule_tag=macro_clusters_mkt_mktflow_assinante_tier1_cluster_realities'],
  name: 'mktflow_assinante_tier1_cluster_realities',
  schema: 'macro_clusters_mkt',
  description: '',
  columns: {
  }
,bigquery: {
    labels: {
      mktcloud: "true"
    }
  }
}

-------------------------------------------VERSÃO 2------------------------------------------------------

--macro cluster tier 1 reality show

--assinantes tier 1 que consumiram reality show vod ou reality show ao vivo nos ultimos 180 dias.



with base_ativa_pagante_com_trial_new_unnest AS (
    SELECT globo_id FROM ${ref("usuarios", "base_ativa_pagante_com_trial_new")} ,
    UNNEST(info) i
    WHERE NOT mais_canais
),

 todos_os_generos as (
SELECT distinct  g.name, c.program.title, c.program.id, c.program.subset, c.program.metadata_scheme, c.program.format
FROM  ${ref("conteudo", "all_content_program")} c,
UNNEST(c.genres) g
),

genero_realities as (
SELECT *
FROM todos_os_generos
WHERE format in ('Reality','reality')
AND subset in ('realities')
),

consumo_em_genero_realities as (
SELECT distinct a.userId as globo_id
FROM ${ref("consumo_enriched", "impression")} a
INNER JOIN genero_realities b
ON a.program_id = b.id
WHERE date >= DATE_SUB(CURRENT_DATE('America/Sao_Paulo'), INTERVAL 180 DAY)
),

consumo_em_programas_ao_vivo_realities as (
SELECT distinct globoid
FROM ${ref("simulcast", "consumo_ibope")}
WHERE data_consumo >= DATE_SUB(CURRENT_DATE('America/Sao_Paulo'), INTERVAL 180 DAY)
AND genero_programa in ('REALITY SHOW')
),

uniao_consumo_vod_e_ao_vivo as (
SELECT globo_id, 'consumo realities' as base
FROM consumo_em_genero_realities
UNION DISTINCT
SELECT globoid as globo_id, 'consumo realities' as base
FROM consumo_em_programas_ao_vivo_realities),

----assinantes tier 1 que navegaram na editoria de Realities do GSHOW nos últimos 15 dias

acesso_gshow_ultimos15d as (
with acesso as (
SELECT distinct
  globoId as globo_id
FROM ${ref("foundation_gshow", "foundation_gshow_sessions")} w,
UNNEST (w.hits) h
WHERE
  data >= DATE_SUB(CURRENT_DATE('America/Sao_Paulo'), INTERVAL 15 DAY)
  AND h.provider = "cadun"
  AND globoId is not null
  AND h.editoriaN1 = "Realities")

SELECT distinct a.globo_id, 'acesso GSHOW REALITY' as base
FROM acesso a
INNER JOIN base_ativa_pagante_com_trial_new_unnest b 
on a.globo_id = b.globo_id
where a.globo_id is not null
),

--uniao de todos os atuais usuarios assinantes tier 1 que:
--consumiram reality shows vod ou reality shows ao vivo nos ultimos 180 dias, ou
--navegaram na editoria de Realities do GSHOW nos últimos 15 dias

basefinal as (
SELECT distinct globo_id, base
FROM uniao_consumo_vod_e_ao_vivo
union distinct
SELECT distinct globo_id, base
FROM acesso_gshow_ultimos15d
),

basefinal_2 as (
select *
from basefinal
order by 1,2
),

basefinal_3 as (
select distinct globo_id, array_to_string(ARRAY_agg(base),', ') as bases
from basefinal_2
group by 1)

SELECT distinct 'named_user' as identifier_type, d.globo_id
FROM basefinal_3 d
INNER JOIN ${ref("comunicacao", "ultima_comunicacao_geral")} e
ON d.globo_id = e.globo_id
WHERE e.tipo_cadastro = "Assinante"
AND e.mais_canais = false
ORDER BY 2 ASC


--select distinct count(distinct globo_id) as gid, bases 
--from oi
--group by rollup(2)
--order by 2 asc