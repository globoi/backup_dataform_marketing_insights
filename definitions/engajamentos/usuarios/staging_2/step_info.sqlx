config {
  type: "table",
  name: "step_info",
  schema: "usuarios",
  tags: ["usuarios_staging_2",
        "schedule_tag=usuarios_step_info"
  ]
}

WITH 
sales_account AS (
  SELECT
    id AS AccountId,
    globo_id,
  FROM
    ${ref("sales_gold", "customer_details")}
),

union_account_legacy AS (
  SELECT AccountId AS AssetId, globo_id FROM sales_account
  UNION DISTINCT
  SELECT AccountId AS AssetId, globo_id FROM gglobo-foundation-psd-hdg-prd.sales_clean.account_legacy
  WHERE table_suffix <= CURRENT_DATE()
),

base_completa_1 AS (
  SELECT
    globo_id,
    AssetId,
    CASE WHEN AssetId IS NOT NULL THEN 1 ELSE 0 END as ct1
  FROM union_account_legacy
),

base_legado_1 AS (
  SELECT
    *,
    COALESCE((LAG(DT_FIM,1) OVER(PARTITION BY ASSINATURA_ID ORDER BY DT_INICIO)), DATE_SUB(DT_INICIO, INTERVAL 30 DAY)) AS Fim_assinatura_anterior
  FROM ${ref("legado", "legado_sales")}
),

base_legado_2 AS (
  SELECT 
    *
  FROM base_legado_1 
  WHERE DATE_DIFF(DT_INICIO, Fim_assinatura_anterior, DAY) >= 30
),

base_legado_3 AS (
  SELECT
    CAST(ASSINATURA_ID AS STRING) AS AssetId,
    COUNT(DISTINCT DT_INICIO) AS n_assinaturas
  FROM base_legado_2
  GROUP BY ASSINATURA_ID
),

legado_completa_1 AS (
  SELECT
    *,
    COALESCE(n_assinaturas, ct1) as ct
    FROM base_completa_1
    LEFT JOIN base_legado_3
    USING (AssetId)
),

assinatura AS (
  SELECT 
    globo_id,
    SUM(ct) OVER(PARTITION BY globo_id) AS numero_assinaturas
  FROM legado_completa_1
  WHERE globo_id IS NOT NULL
),

base_ativa_pagante_com_trial AS (
  SELECT
    globo_id,
    id_asset,
    tipo_assinante,
    mais_canais,
    Produto_Contratado,
    cast(null AS bool) As em_ativacao,
    dt_assinatura_comeco,
    canal_compra,
    data_hora_compra,
    produto,
    origem,
    assinatura_gplay,
    tempo_de_base_agrupado,

    SUM(CASE WHEN tipo_assinante LIKE 'dependente' THEN 1 ELSE 0 END) OVER(PARTITION BY id_asset) as numero_dependentes
  FROM ${ref("usuarios", "base_ativa_pagante_com_trial_new")}, UNNEST(info) i
  
),

demografia AS (
  SELECT 
    globo_id,
    address_state,
    address_city,
    age,
    COALESCE(gender, gender_inf) as gender
  FROM ${ref("globoid_enriched", "demografia")}
)

SELECT 
  * EXCEPT (numero_assinaturas),
  COALESCE(numero_assinaturas, 1) as numero_assinaturas
FROM base_ativa_pagante_com_trial
LEFT JOIN demografia
USING (globo_id)
LEFT JOIN assinatura
USING (globo_id)
WHERE LOWER(tipo_assinante) NOT LIKE '%trial%'
