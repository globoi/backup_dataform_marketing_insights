config {
  type: "table",
  name: "base_ltv_v2",
  schema: "usuarios",
  tags: ["usuarios_staging_1",
        "schedule_tag=usuarios_base_ltv_v2",
        "schedule_cron=30 9 * * *"
        ],
    description: 'Base com usuários geraram lucro.',
  /*   columns: {
   AssetId:'Código do item da Cesta (Produto que o cliente adquiriu).',
   globo_id:'Código de identificação do usuário.',
   AssetName:'Nome do produto na cesta.',
   frequencia_cobranca:'Identifica a periodicidade da cobrança do produto adquirido. Ex: Anual, bianual ou mensal.', 
   caracteristica_produto:'Identifica se o produto foi comprado por meio de combo ou não.',
   tipo_de_aquisicao:'Identifica o tipo de movimentação do produto relacionado a compra. (Ex: Cross, Upgrade, Downgrade, etc.).',
   tipo_de_pedido:'Informa o tipo de pedido realizado pelo cliente.(Ex: Produto, Oferta ou Combo).',
   status_calculado:'status da assinatura.',
   visivel_cesta:'Composto com o id do item da cesta do cliente. Mostra somente na linha referente ao que ele efetivamente paga ou contrata.',
   preco:'Informa o preço do Ativo.',
   data_compra:'Data da compra do produto.',
   data_fim_ref:'Identifica a data final de um cliente dentro da base (data de cancelamento, suspensão ou data atual, caso o intem ainda esteja ativo.).',
   origem_id:'Código que identifica a origem do pedido.',
   descricao_origem_id:'Descrição da data origem do pedido.',
   lt:'Identifica o periodo em que o usuário esteve dentro da base, descontando o periódo.',
   lt_sem_desconto:'Identifica o periodo em que o usuário esteve dentro da base sem desconto.',
   lt_mes_cheio:'Identifica o periodo em que o usuário esteve dentro da base dentro de 30 dias.',
   lt_meses:'Identifica o periodo em que o usuário teve dentro da base em contagem de meses.',
   ciclos_pagos:'Identifica a quantidadae de faturas pagas.',
   receita_total:'Identifica o quanto de receita o usuário gerou com uma assinatura.',
   grupo:'Define qual grupo o usuário pertence por meio de seus gastos.',
   tier_fidelidade:'Define qual tier o usuário está de acordo com o grupo especificado.'
   }*/
}

----------- Nova
-- cria tabela com inicio e fim de um asset
-- cria arrays de suspensão e reativação ordenados de forma ascendente
-- cria coluna de frequencia de cobrança tratada pros casos de parcelado
-- mantém apenas vendas contendo globoplay a partir de 2018-01-01

WITH 
step_1 AS
(SELECT 
  -- DISTINCT -- -> entender
    ss.globo_id, 
    sd.id AS AssetId,
    sd.product_name AS AssetName,
    sd.subscription_status AS status_calculado,
    DATE(sd.subscription_at) AS data_compra,
    DATE(sd.end_cycle_at) AS dt_cancelamento_final_ciclo,
    DATE(sd.on_hold_at) AS data_da_suspensao,
    sd.origin_id AS origem_id,
    sd.origin_name AS descricao_origem_id,
    IF(REGEXP_CONTAINS(pd.code,"(?i)(parc|parcelado)"), CONCAT(sd.billing_frequency, " Parcelado"), sd.billing_frequency) AS frequencia_cobranca_tratada,
    sd.billing_frequency AS frequencia_cobranca,
    sd.unsubscribe_type AS tipo_cancelamento,
    unsubscription_event_action,


    asset.EVA_Caracteristica_Produto_c AS caracteristica_produto,
    sd.purchase_channel AS canal_compra,
    sd.subscription_type AS tipo_de_aquisicao, --> entender
    asset.EVA_Tipo_de_pedido_c AS tipo_de_pedido,
    sd.customer_id AS visivel_cesta, --> entender
    sd.price AS preco,
    COALESCE(DATE(sd.end_cycle_at), CURRENT_DATE()) AS data_fim_ref_old,
    ARRAY( SELECT x FROM UNNEST( [DATE(sd.on_hold_at), DATE(sd.end_cycle_at), CURRENT_DATE()] ) AS x WHERE x IS NOT NULL ORDER BY x ASC ) [SAFE_OFFSET(0)] AS data_fim_ref,

    CURRENT_DATE() AS dt_processamento
    
FROM  
  ${ref('sales_gold', 'subscription_details')} AS sd
INNER JOIN 
  -- ${ref('sales_gold', 'subscription_state')} AS ss 
  ${ref('sales_gold', 'last_subscription_state')} AS ss 
  ON ss.object_id = sd.id
LEFT JOIN ${ref('salesforce', 'asset')} AS asset 
  ON asset.id = sd.id
LEFT JOIN 
  ${ref('sales_gold', 'product_details')} AS pd 
    -- `gglobo-vendas-hdg-prd.sales_gold.product_details` AS pd
  ON sd.product_id = pd.id

WHERE
    1 = 1
    AND sd.subscription_at >= '2018-01-01'
    AND LOWER(sd.product_name) LIKE '%globoplay%'

),

-- Cria array com suspensões e reativações -> aumentando o período...
-- object_id, subscription_status, lista_suspensoes, lista_reativacoes
-- lista de duracao_suspensoes, max_dias_suspenso, dias_suspenso

listas AS (
  SELECT
    object_id,
    subscription_status,
    event,
    event_at,
    LAG(CASE WHEN event = 'subscription_on_hold' THEN event_at END) OVER (PARTITION BY object_id ORDER BY event_at) AS previous_hold_at,
    IF(event = 'reactivation'
          ,DATE_DIFF(
                    event_at, 
                    LAG(CASE WHEN event = 'subscription_on_hold' THEN event_at END) OVER (PARTITION BY object_id ORDER BY event_at),  
                  DAY) 
          ,NULL) 
    AS days_since_last_hold
  FROM
    -- `gglobo-vendas-hdg-prd.sales_gold.customer_events` AS e
    ${ref('sales_gold', 'customer_events')} AS e
  LEFT JOIN     
    ${ref('sales_gold', 'subscription_details')} AS sd ON e.object_id = sd.id 
  LEFT JOIN 
    ${ref('sales_gold', 'partner_details')}  AS pt ON e.object_id = pt.partner_token
  LEFT JOIN 
    ${ref('sales_gold', 'product_details')} AS pd ON sd.product_id = pd.id OR pt.product_id = pd.id 
  WHERE 1=1
    AND sd.subscription_at >= '2018-01-01'
    AND LOWER(sd.product_name) LIKE '%globoplay%'
    AND event in ('subscription_on_hold','reactivation')
),

listas_2 as (
  select 
object_id, 
subscription_status, 
ARRAY_AGG(IF(event='subscription_on_hold',event_at,NULL) IGNORE NULLS ORDER BY event_at ASC) AS lista_suspensoes,
ARRAY_AGG(IF(event='reactivation',event_at,NULL) IGNORE NULLS ORDER BY event_at ASC) AS lista_reativacoes,
ARRAY_AGG(IF(event='reactivation',previous_hold_at,NULL) IGNORE NULLS ORDER BY event_at ASC) AS lista_previous_hold_at,
ARRAY_AGG(days_since_last_hold IGNORE NULLS) AS duracao_suspensoes,
sum(days_since_last_hold) as dias_suspenso,
from listas
group by 1,2
),


-- cria colunas de duração da assinatura (LT)
step_2 AS (
  SELECT
    *,
    DATE_DIFF(data_fim_ref, data_compra, DAY) AS lt_sem_desconto,
    DATE_DIFF(data_fim_ref, data_compra, DAY) - COALESCE(dias_suspenso, 0) AS lt,
    DATE_DIFF(data_fim_ref, data_compra, MONTH) lt_meses_old
  FROM
    step_1
  LEFT JOIN 
    listas_2 ON step_1.AssetId = listas_2.object_id
),


-- TODO: rever fomula do lt_meses e lt_mes_cheio -> deletar lt_meses?
step_3 AS (
  SELECT
    *,
    CAST(FLOOR(SAFE_DIVIDE(lt, 30)) AS INT64) AS lt_mes_cheio,
    CAST(FLOOR(SAFE_DIVIDE(lt, 30)) AS INT64) AS lt_meses, 
    CAST(CEIL(
      SAFE_DIVIDE(
        lt,
        (
          CASE
            WHEN LOWER(frequencia_cobranca_tratada) = 'mensal' THEN 30
            WHEN LOWER(frequencia_cobranca_tratada) = 'anual parcelado' THEN 30
            WHEN LOWER(frequencia_cobranca_tratada) = 'trimestral' THEN 90
            WHEN LOWER(frequencia_cobranca_tratada) = 'anual' THEN 365
            WHEN LOWER(frequencia_cobranca_tratada) = 'bianual' THEN 730
            ELSE 30
          END
        )
      )
    ) AS INT64) AS ciclos_pagos
  FROM
    step_2
),

step_4 AS (
  SELECT
    *,
    ROUND(ciclos_pagos * preco, 2) AS receita_total_mensalizada,
    ROUND(IF(LOWER(frequencia_cobranca_tratada) = "anual parcelado", CEIL(ciclos_pagos/12) * (preco * 12), ciclos_pagos * preco), 2) AS receita_total
  FROM
    step_3
  WHERE
    1 = 1
)

  SELECT
    -- AssetId,
    -- globo_id,
    -- AssetName,
    -- frequencia_cobranca,
    -- frequencia_cobranca_tratada,
    -- -- caracteristica_produto,
    -- tipo_de_aquisicao,
    -- tipo_cancelamento,
    -- unsubscription_event_action,
    -- -- tipo_de_pedido,
    -- lista_suspensoes,
    -- lista_reativacoes,
    -- duracao_suspensoes,
    -- status_calculado,
    -- visivel_cesta,
    -- preco,
    -- data_compra,
    -- data_fim_ref,
    -- dias_suspenso,
    -- origem_id,
    -- descricao_origem_id,
    -- lt,
    -- lt_sem_desconto,
    -- lt_mes_cheio,
    -- lt_meses,
    -- ciclos_pagos,
    -- receita_total,
    *
  FROM
    step_4

  WHERE 1=1
    AND lt >= 0
    AND receita_total >= 0
    AND COALESCE(dias_suspenso,0) >= 0
    AND LOWER(AssetName) NOT LIKE '%presente%'
    AND NOT (
      AssetName = 'Globoplay'
      AND frequencia_cobranca = 'Anual'
      AND preco > 500
    )
    AND NOT (
      AssetName = 'Globoplay'
      AND frequencia_cobranca = 'Mensal'
      AND preco > 25
    )
    AND NOT (
      AssetName != 'Globoplay'
      AND frequencia_cobranca = 'Mensal'
      AND preco > 100
    )
    AND NOT (
      frequencia_cobranca IS NULL
      AND preco > 500
    )