config {
  type: 'table',
  tags: [
    'jornada_consumo',
    'schedule_tag=macro_clusters_mkt_mktflow_assinante_premium_novelas',
    "schedule_cron=00 11 * * 1"
    ],
  name: 'mktflow_assinante_premium_novelas',
  schema: 'macro_clusters_mkt',
  bigquery: {
    labels: {
      tags: "",
      owner: "martech" ,
      urban: "list",
      mktcloud: "true"
    }
  },
  description: 'assinantes premium que consumiram novelas vod ou novelas ao vivo nos ultimos 180 dias, ou acessaram a editoria de novelas no gshow pelo menos 5 vezes nos ultimos 15 dias',
  columns: {
  },
}

--macro cluster premium novela

--assinantes premium que consumiram novelas vod ou novelas ao vivo nos ultimos 180 dias.

with consumo_em_genero_novela_vod_hrs as (
  SELECT distinct a.userId as globo_id, sum(hours_watched) AS hrs_consumidas
  FROM  ${ref('consumo_enriched','impression')} a
  WHERE date >= DATE_SUB(CURRENT_DATE('America/Sao_Paulo'), INTERVAL 180 DAY)
    AND program_subset = 'novelas'
  GROUP BY ALL
  HAVING hrs_consumidas >= 1
),

consumo_em_genero_novela_vod_qtd as (
  SELECT distinct a.userId as globo_id, count(distinct program_id) AS novelas_assistidas
  FROM  ${ref('consumo_enriched','impression')} a
  WHERE date >= DATE_SUB(CURRENT_DATE('America/Sao_Paulo'), INTERVAL 180 DAY)
    AND program_subset = 'novelas'
  GROUP BY ALL
  HAVING novelas_assistidas >= 2
),

consumo_em_genero_novela_vod as (
  select hrs.globo_id, hrs.hrs_consumidas, qtd.novelas_assistidas 
  from consumo_em_genero_novela_vod_hrs as hrs
  join consumo_em_genero_novela_vod_qtd as qtd
    on hrs.globo_id = qtd.globo_id
),

consumo_em_programas_ao_vivo_novela_hrs as (
  SELECT distinct globoid, sum(playtime_hours) as hrs_consumidas
  FROM ${ref('simulcast','consumo_ibope')}
  WHERE data_consumo >= DATE_SUB(CURRENT_DATE('America/Sao_Paulo'), INTERVAL 180 DAY)
  AND genero_programa in ('NOVELA')
  GROUP BY ALL
  HAVING hrs_consumidas >= 0.32
),

consumo_em_programas_ao_vivo_novela_qtd as (
  SELECT distinct globoid, count(distinct program_id) as novelas_assistidas
  FROM ${ref('simulcast','consumo_ibope')}
  WHERE data_consumo >= DATE_SUB(CURRENT_DATE('America/Sao_Paulo'), INTERVAL 180 DAY)
  AND genero_programa in ('NOVELA')
  GROUP BY ALL
  HAVING novelas_assistidas >= 2
),

consumo_em_programas_ao_vivo_novela as (
  SELECT hrs.globoid, hrs.hrs_consumidas, qtd.novelas_assistidas
  FROM consumo_em_programas_ao_vivo_novela_hrs AS hrs
  JOIN consumo_em_programas_ao_vivo_novela_qtd AS qtd
    ON hrs.globoid = qtd.globoid
),

uniao_consumo_vod_e_ao_vivo as (
  SELECT globo_id, 'consumo novelas' as base
  FROM consumo_em_genero_novela_vod

  UNION DISTINCT

  SELECT globoid as globo_id, 'consumo novelas' as base
  FROM consumo_em_programas_ao_vivo_novela
),

--assinantes premium que navegaram na editoria de Novelas do GSHOW pelo menos 5 vezes nos últimos 15 dias

acesso_gshow_ultimos15d as (
  SELECT globoId AS globo_id, 'acesso GSHOW' AS base, COUNT(DISTINCT(CONCAT(globoId,sessionId))) AS qtd_acesso
  FROM ${ref('foundation_gshow','foundation_gshow_sessions_v3')} s, UNNEST (s.hits) AS h 
  WHERE data BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 15 DAY) AND CURRENT_DATE()
    AND h.provider = "cadun"
    AND REGEXP_CONTAINS(h.pagePath, "/novelas/")
    AND globoId IS NOT NULL
  GROUP BY globoId
  HAVING qtd_acesso >= 5
  ORDER BY qtd_acesso DESC
),

--uniao de todos os atuais usuarios assinantes premium que:
--consumiram novelas vod ou novelas ao vivo nos ultimos 180 dias, ou
--navegaram na editoria de Novelas do GSHOW pelo menos 5 vezes nos últimos 15 dias

basefinal as (
  with uniao as (
    SELECT distinct globo_id, base
    FROM uniao_consumo_vod_e_ao_vivo

    UNION DISTINCT

    SELECT distinct globo_id, base
    FROM acesso_gshow_ultimos15d
  ),

  base_ordenada as (
    SELECT *
    FROM uniao
    ORDER BY 1,2
  )
  
  --tirando réplicas de GLOBO_ID da base_ordenada
  SELECT DISTINCT globo_id, array_to_string(ARRAY_agg(base),', ') as bases
  FROM base_ordenada
  GROUP BY 1
)


SELECT distinct 'named_user' as identifier_type, d.globo_id
FROM basefinal d
INNER JOIN ${ref('comunicacao','ultima_comunicacao_geral')} e
  ON d.globo_id = e.globo_id
WHERE e.tipo_cadastro = "Assinante"
  AND e.mais_canais = true

