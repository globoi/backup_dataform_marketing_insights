config {
  type: 'incremental',
  uniqueKey: ["globo_id"],
  tags: ['schedule_tag=experimentos_projeto_gnt_cluster_consumo_relacao_grupos'],
  name: 'projeto_gnt_cluster_consumo_relacao_grupos',
  schema: 'experimentos',
  description: '',
  columns: {
  }
}

-- Query para fazer atribuir novos consumidores gnt aos seus grupos na projeto_gnt_cluster_consumo_relacao_grupos

-- Roda antes

--INSERT INTO ${ref("experimentos", "projeto_gnt_cluster_consumo_relacao_grupos")}

WITH
  -- etapa com os filtros de negócio principal
  consumo_tier2_gnt as (
  SELECT DISTINCT
  globo_id
FROM 
  ${ref("conteudo_enriched", "content")} a
INNER JOIN 
  ${ref("consumo", "pre_step_consumo")} b
USING (program_id)
INNER JOIN
  ${ref("usuarios", "base_ativa_pagante_com_trial_new")} c
USING (globo_id),
UNNEST (info) AS info_trial
WHERE 
  LOWER(a.channel_title) LIKE "%gnt%" 
  AND DATE_DIFF(CURRENT_DATE(),DATE(timestamp), DAY) <= 120
  AND info_trial.assinatura_gplay = "nacional"
  AND info_trial.mais_canais = true
  ORDER BY 1 ASC
  ),

  -- etapa para atribuir a grupos apenas os novos entrantes
  novos_usuarios_distribuidos AS (
  SELECT
    aa.globo_id,
    NTILE(2) OVER (ORDER BY RAND()) AS indice_grupo,
    FROM consumo_tier2_gnt AS aa
    -- pedaço que faz pegar apenas os novos entrantes
    -- na primera iteração, não confere com ela mesma
    ${when(incremental(),
    `LEFT JOIN ${self()} AS bb ON aa.globo_id = bb.globo_id WHERE bb.globo_id IS NULL`,
     ` `)
     }
  ),
  
  -- nomear os grupos 
  novos_usuarios_organizados AS (
  SELECT
    globo_id,
    IF (indice_grupo = 1,'Teste','Controle') AS grupo
    FROM novos_usuarios_distribuidos
  )

SELECT
  globo_id,
  grupo
  FROM novos_usuarios_organizados